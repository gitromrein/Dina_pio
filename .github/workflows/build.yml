name: sl-vario.kommunikationsmodul.firmware
on:
  push:
    branches:
      - main    
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  # only_build:
  #   name: build .hex with Platformio CLI
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Cache pip
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.cache/pip
  #       key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #       restore-keys: |
  #         ${{ runner.os }}-pip-
  #   - name: Cache PlatformIO
  #     uses: actions/cache@v2
  #     with:
  #       path: ~/.platformio
  #       key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
  #   - name: Set up Python
  #     uses: actions/setup-python@v2
  #   - name: Install PlatformIO
  #     run: |
  #       python -m pip install --upgrade pip
  #       pip install --upgrade platformio
  #   - name: Run PlatformIO
  #     run: pio run -e debug

  
  build:
    name: build Ubuntu und Windowa
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Run build
        run: pio run
        
  check_:
    name: run static code analysis cppcheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Run Code Analyse CppCheck
        run: pio check
  
  build_and_check_ubuntu_sonar:
    name: build with plattformio cli, run static code analysis on sonarcloud.io   
    runs-on: ubuntu-latest
    env:
      BUILD_WRAPPER_OUT_DIR: build_wrapper_output_directory # Directory where build-wrapper output will be placed
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      #- name: Cache pip
      #  uses: actions/cache@v2
      #  with:
      #    path: ~/.cache/pip
      #    key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #    restore-keys: |
      #      ${{ runner.os }}-pip-
      #- name: Cache PlatformIO
      #  uses: actions/cache@v2
      #  with:
      #    path: ~/.platformio
      #    key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}
      #- name: Set up Python
      #  uses: actions/setup-python@v2
      - name: Install PlatformIO
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade platformio
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Run Code Analyse CppCheck
        run: pio check
      - name: Install sonar-scanner and build-wrapper
        uses: SonarSource/sonarcloud-github-c-cpp@v1
      - name: Run build-wrapper
        run: |
          build-wrapper-linux-x86-64 --out-dir ${{ env.BUILD_WRAPPER_OUT_DIR }} platformio run
      - name: Archive build-wrapper output
        uses: actions/upload-artifact@v3
        with:
          name: build-wrapper output
          path: ${{ env.BUILD_WRAPPER_OUT_DIR }}
      - name: Archive firmware hex
        uses: actions/upload-artifact@v3
        with:
          name: firware
          path: .pio/build/debug/firmware.*
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          sonar-scanner --define sonar.cfamily.build-wrapper-output="${{ env.BUILD_WRAPPER_OUT_DIR }}" 
